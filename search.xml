<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue-4chapter-v-bind&class&style]]></title>
    <url>%2F2017%2F12%2F05%2Fvue-4chapter-v-bind%2F</url>
    <content type="text"><![CDATA[第四章v-bind及class与style绑定4.1绑定class的几种方式 1&lt;div :class=&quot;&#123;&apos;active&apos;:isActive&#125;&quot;&gt;&lt;/div&gt; 上述示例，当实例中的isActive数据为true的时候会自动帮div添加一个active类同样，也可以在对象中传入多个属性来动态切换class，而且:class可以与普通的class共存1&lt;div :class=&quot;&#123;&apos;active&apos;:isActive,&apos;error&apos;:isError&#125;&quot;&gt;&lt;/div&gt; 当:class的表达式过长或逻辑复杂时，还可以绑定一个计算属性，这是一种很友好和常见的用法，一般当条件多于两个时，都可以使用data或computed例如：1234567891011121314151617181920&lt;div id=&quot;app&quot;&gt; &lt;div :class=&quot;classes&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt; var app = new Vue(&#123; el:&apos;#app&apos;, data:&#123; isActive : true, isError : null &#125;, computed:&#123; classes:function()&#123; return &#123; active: this.isActive &amp;&amp; !this.error, &apos;text-fail&apos;:this.error &amp;&amp; this.error.type === &apos;fail&apos; &#125; &#125; &#125; &#125;)&lt;/script&gt; 可以使用三元表达式来根据条件切换class1&lt;div :class=&quot;[isActive ? activesCls : &apos;&apos;]&quot;&gt;&lt;/div&gt; 当然，class也可以使用computed和methods，这样加上data一共有三种方法来使用 在组件上使用:class Vue.component(‘my-component’,{ template: “一些文本“}); var app=new Vue({ el:"#app", data:{ isActive:true } })]]></content>
      <tags>
        <tag>vue实战学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue-3chapter-computed]]></title>
    <url>%2F2017%2F12%2F05%2Fvue-3chapter-computed%2F</url>
    <content type="text"><![CDATA[##第三章 计算属性 3.1什么是计算属性计算属性computed 是为了解决复杂的逻辑语句，使得vue模板中的语句不是那么臃肿和难以阅读 3.2计算属性的用法计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，但是最终要返回一个结果。 计算属性中默认有getter和setter方法，get用来读取，set在写入时会触发，默认情况下会调用get方法123456789101112computed:&#123; fullName:&#123; get:function()&#123; return this.firstName+&apos; &apos;+this.lastName; &#125;, set:function(newValue)&#123; var names = newValue.split(&apos; &apos;); this.firstName = names[0]; this.lastName = names[names.length-1]; &#125; &#125;&#125; 计算属性还有两个很实用的小技巧： 计算属性可以依赖其他的计算属性 计算属性还可以依赖其它实例的数据 3.3计算属性缓存我们仔细思考不难发现，计算属性实现的功能method方法同样可以实现，那么我们为什么还要使用计算属性呢？ 原因就是计算属性是基于他的依赖来缓存的。一个计算属性所依赖的数据发生变化时，它才会重新取值，所以只要依赖不改变，计算属性也就不更新。]]></content>
      <tags>
        <tag>vue实战学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp工具的具体使用指南]]></title>
    <url>%2F2017%2F12%2F03%2Fgulp%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[全局安装gulp 1npm i -g gulp 将gulp作为项目的开发依赖 1npm install -D gulp 初始化gulpfile.js 在项目根目录下新建一个gulpfile.js文件 在gulpfile.js中引入gulp 使用gulp的task方法创建一个打包任务 在script任务中添加代码打包方法添加一个gulp-load-plugins 这个插件能极大的简化我们的工作流程，他的作用是自动引入我们所安装的所有gulp插件，然后我们只需要在头部引入一下这个插件，然后可以通过这个插件名调用我们引入的插件。 添加一个插件gulp-concat 这个插件可以让gulp拥有合并几个文件的功能 添加一个插件，安装依赖gulp-plumber 这个插件的作用简单来说就是一旦pipe中的某一steam报错了，保证下面的steam还继续执行 再添加一个代码压缩插件gulp-uglify uglify顾名思义就是丑化代码，让代码格式消失，压缩代码 然后去使用插件并完成压缩打包任务 配置执行打包任务使用gulp.task创建任务 然后我们在gulpfile.js同目录下执行打包命令这样我们的代码就打包成功了，可以看到dist和build文件夹下都自动生成了我们打包的代码 实现文件保存自动压缩 添加一个gulp任务，并在任务里添加一个watch事件去监听文件的变化，当文件变化时去执行指定的任务即完成了代码的自动打包 还有一件很重要的事情叫做添加默认任务 在实际工作中，别人可能不知道我们都定义了那些任务，所以我们要添加一个默认任务，让这个默认任务去执行我们想要执行的任务这样就完成了,我们在之前的命令行执行 1gulp default]]></content>
      <categories>
        <category>gulp教程</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何自己搭建一个angular脚手架]]></title>
    <url>%2F2017%2F12%2F02%2Fangular1.0%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本次以angular1.0脚手架为例 首先明确目录结构1234567891011121314151617181920212223242526configbuilddist static js all.min.js bundle.js style bundle.css index.htmlsrc controller ActivityCtrl.js ActivityCtrl.js service ActivityService.js ActivityService.js ActivityService.js app.js route.js view user user.html userAdd.html activity index.html 项目根目录下 一个配置文件夹conf 一个本地开发文件存放位置build 一个线上运行文件存放位置dist 一个本地编辑的源文件目录src 一个视图文件夹 cd进项目文件后执行命令行创建基本框架文件夹1mkdir -p dist config build src/&#123;controller,service,view/&#123;user,activity&#125;&#125; 完善相关src目录 创建入口文件app.js 12cd src/touch app.js 创建路由文件 1touch route.js 创建controller和service文件夹 1mkdir controllers services 根据相关功能添加相应文件及目录]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
</search>
