<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue-3chapter-computed]]></title>
    <url>%2F2017%2F12%2F05%2Fvue-3chapter-computed%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[gulp工具的具体使用指南]]></title>
    <url>%2F2017%2F12%2F03%2Fgulp%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[全局安装gulp 1npm i -g gulp 将gulp作为项目的开发依赖 1npm install -D gulp 初始化gulpfile.js 在项目根目录下新建一个gulpfile.js文件 在gulpfile.js中引入gulp 使用gulp的task方法创建一个打包任务 在script任务中添加代码打包方法添加一个gulp-load-plugins 这个插件能极大的简化我们的工作流程，他的作用是自动引入我们所安装的所有gulp插件，然后我们只需要在头部引入一下这个插件，然后可以通过这个插件名调用我们引入的插件。 添加一个插件gulp-concat 这个插件可以让gulp拥有合并几个文件的功能 添加一个插件，安装依赖gulp-plumber 这个插件的作用简单来说就是一旦pipe中的某一steam报错了，保证下面的steam还继续执行 再添加一个代码压缩插件gulp-uglify uglify顾名思义就是丑化代码，让代码格式消失，压缩代码 然后去使用插件并完成压缩打包任务 配置执行打包任务使用gulp.task创建任务 然后我们在gulpfile.js同目录下执行打包命令这样我们的代码就打包成功了，可以看到dist和build文件夹下都自动生成了我们打包的代码 实现文件保存自动压缩 添加一个gulp任务，并在任务里添加一个watch事件去监听文件的变化，当文件变化时去执行指定的任务即完成了代码的自动打包 还有一件很重要的事情叫做添加默认任务 在实际工作中，别人可能不知道我们都定义了那些任务，所以我们要添加一个默认任务，让这个默认任务去执行我们想要执行的任务这样就完成了,我们在之前的命令行执行 1gulp default]]></content>
      <categories>
        <category>gulp教程</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何自己搭建一个angular脚手架]]></title>
    <url>%2F2017%2F12%2F02%2Fangular1.0%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[本次以angular1.0脚手架为例 首先明确目录结构1234567891011121314151617181920212223242526configbuilddist static js all.min.js bundle.js style bundle.css index.htmlsrc controller ActivityCtrl.js ActivityCtrl.js service ActivityService.js ActivityService.js ActivityService.js app.js route.js view user user.html userAdd.html activity index.html 项目根目录下 一个配置文件夹conf 一个本地开发文件存放位置build 一个线上运行文件存放位置dist 一个本地编辑的源文件目录src 一个视图文件夹 cd进项目文件后执行命令行创建基本框架文件夹1mkdir -p dist config build src/&#123;controller,service,view/&#123;user,activity&#125;&#125; 完善相关src目录 创建入口文件app.js 12cd src/touch app.js 创建路由文件 1touch route.js 创建controller和service文件夹 1mkdir controllers services 根据相关功能添加相应文件及目录]]></content>
      <categories>
        <category>angular</category>
      </categories>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
</search>
